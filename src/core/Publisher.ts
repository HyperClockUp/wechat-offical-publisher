import axios, { AxiosInstance } from 'axios';
import { Plugin, PluginContext, ArticleContent, PublisherConfig } from './types';
import { AccessTokenCache } from './AccessTokenCache';

const WECHAT_API_BASE_URL = 'https://api.weixin.qq.com/cgi-bin';

// 初始化访问令牌缓存
AccessTokenCache.init();

/**
 * 微信文章发布器
 */
export class WeChatPublisher {
  private readonly config: Required<PublisherConfig>;
  private accessToken: string = '';
  private tokenExpiresAt: number = 0;
  private readonly http: AxiosInstance;

  constructor(config: PublisherConfig) {
    this.config = {
      plugins: [],
      debug: false,
      ...config
    };
    
    // 确保 publishToDraft 为 boolean 类型
    if (typeof this.config.publishToDraft !== 'boolean') {
      this.config.publishToDraft = true; // 默认发布到草稿箱
    }

    // 如果没有配置 AppID 或 AppSecret，启用调试模式
    if (!this.config.appId || !this.config.appSecret) {
      this.config.debug = true;
    }

    // 创建 axios 实例
    this.http = axios.create({
      baseURL: WECHAT_API_BASE_URL,
      timeout: 10000, // 10秒超时
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }

  /**
   * 添加插件
   */
  use(plugin: Plugin): this {
    this.config.plugins.push(plugin);
    return this;
  }

  /**
   * 发布文章
   * @returns 返回发布结果，包含文章信息和状态
   */
  async publish(input: string): Promise<{ msg: string; article: ArticleContent }> {
    // 初始化上下文
    const ctx: PluginContext = {
      input,
      article: null,
    };

    try {
      // 执行插件链
      for (const plugin of this.config.plugins) {
        if (this.config.debug) {
          console.log(`[DEBUG] Executing plugin: ${plugin.name}`);
        }
        await plugin.execute(ctx);
      }

      if (!ctx.article) {
        throw new Error('No article content was generated by plugins');
      }

      // 获取访问令牌
      await this.ensureAccessToken();
      
      // 发布到微信并返回结果
      return await this.publishToWeChat(ctx.article);
    } catch (error) {
      console.error('发布失败:', error instanceof Error ? error.message : String(error));
      throw error;
    }
  }

  /**
   * 获取当前访问令牌
   * @returns 当前访问令牌
   */
  public getAccessToken(): string {
    return this.accessToken;
  }

  /**
   * 确保访问令牌有效
   */
  public async ensureAccessToken(): Promise<void> {
    try {
      // 尝试从缓存读取
      const cached = AccessTokenCache.load();
      if (cached && cached.expiresAt > Date.now()) {
        console.log('[INFO] 使用缓存的访问令牌');
        this.accessToken = cached.token;
        this.tokenExpiresAt = cached.expiresAt;
        return;
      }

      // 如果令牌有效，直接返回
      if (this.accessToken && this.tokenExpiresAt > Date.now()) {
        return;
      }

      console.log('获取微信访问令牌...');
      const { data } = await this.http.get<{
        access_token: string;
        expires_in: number;
        errcode?: number;
        errmsg?: string;
      }>(`/token`, {
        params: {
          grant_type: 'client_credential',
          appid: this.config.appId,
          secret: this.config.appSecret
        }
      });
      
      if (data.errcode) {
        throw new Error(`微信API错误: ${data.errmsg || '未知错误'}`);
      }

      if (!data.access_token) {
        throw new Error('获取访问令牌失败: 返回的令牌为空');
      }

      this.accessToken = data.access_token;
      // 提前5分钟过期，避免临界点问题
      this.tokenExpiresAt = Date.now() + (data.expires_in - 300) * 1000;
      console.log('成功获取访问令牌');

      // 保存到缓存
      AccessTokenCache.save(this.accessToken, this.tokenExpiresAt);
    } catch (error) {
      console.error('获取访问令牌失败:', error);
      throw new Error(`获取访问令牌失败: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * 发布到微信公众号草稿箱
   */
  private async publishToWeChat(article: ArticleContent): Promise<{ msg: string; article: ArticleContent }> {
    // 模拟模式，不实际发布到微信
    if (this.config.debug) {
      console.log('[DEBUG] 模拟模式：跳过实际发布到微信');
      console.log('文章标题:', article.title);
      console.log('文章内容预览:', article.content.substring(0, 100) + '...');
      if (this.config.publishToDraft) {
        console.log('[DEBUG] 模拟模式：文章将发布到草稿箱');
        return { 
          msg: '模拟发布到草稿箱成功', 
          article: {
            ...article,
            content: article.content.substring(0, 100) + '...'
          }
        };
      } else {
        console.log('[DEBUG] 模拟模式：文章将直接发布');
        return { 
          msg: '模拟直接发布成功', 
          article: {
            ...article,
            content: article.content.substring(0, 100) + '...'
          }
        };
      }
    }

    try {
      // 确保访问令牌有效
      await this.ensureAccessToken();

      // 根据配置选择发布接口
      const endpoint = this.config.publishToDraft ? '/draft/add' : '/freepublish/submit';
      console.log(`正在${this.config.publishToDraft ? '发布到草稿箱' : '直接发布'}...`);
      
      // 打印请求参数
      console.log('[DEBUG] 发布请求参数:', {
        endpoint,
        title: article.title,
        content: article.content.substring(0, 100) + '...',
        thumb_media_id: article.thumbMediaId,
        show_cover_pic: article.showCoverPic ? 1 : 0
      });
      
      const { data } = await this.http.post<{
        errcode?: number;
        errmsg?: string;
        media_id?: string;
        [key: string]: any;
      }>(endpoint, {
        articles: [{
          title: article.title,
          content: article.content,
          digest: article.digest || '',
          thumb_media_id: article.thumbMediaId || '',
          author: article.author || '',
          show_cover_pic: article.showCoverPic ? 1 : 0,
          content_source_url: article.sourceUrl || '',
          need_open_comment: article.needOpenComment ? 1 : 0,
          only_fans_can_comment: article.onlyFansCanComment ? 1 : 0
        }]
      }, {
        params: { access_token: this.accessToken }
      });

      // 打印响应数据
      console.log('[DEBUG] 发布响应数据:', {
        errcode: data.errcode,
        errmsg: data.errmsg,
        media_id: data.media_id,
        url: data.url
      });

      // 检查错误码
      if (data.errcode && data.errcode !== 0) {
        // 如果是草稿箱发布且错误码是 media_id 无效，说明没有封面图片
        if (this.config.publishToDraft && data.errmsg === 'invalid media_id') {
          console.log('[INFO] 没有封面图片，继续发布...');
          // 重新发送请求，不包含封面图片
          const { data: noCoverData } = await this.http.post<{
            errcode?: number;
            errmsg?: string;
            media_id?: string;
            url?: string;
            [key: string]: any;
          }>(endpoint, {
            articles: [{
              title: article.title,
              content: article.content,
              digest: article.digest || '',
              thumb_media_id: '', // 清空封面图片ID
              author: article.author || '',
              show_cover_pic: 0, // 不显示封面图片
              content_source_url: article.sourceUrl || '',
              need_open_comment: article.needOpenComment ? 1 : 0,
              only_fans_can_comment: article.onlyFansCanComment ? 1 : 0
            }]
          }, {
            params: { access_token: this.accessToken }
          });

          // 处理返回结果
          const result = {
            msg: this.config.publishToDraft ? '成功发布到草稿箱' : '发布成功',
            article: {
              ...article,
              content: article.content.substring(0, 100) + '...'
            }
          };

          // 如果是草稿箱发布，添加 mediaId
          if (this.config.publishToDraft && noCoverData.media_id) {
            result.article.mediaId = noCoverData.media_id;
          }

          // 如果是直接发布，添加文章链接
          if (!this.config.publishToDraft && noCoverData.url) {
            result.article.url = noCoverData.url;
          }

          return result;
        }
        throw new Error(`微信API错误: ${data.errmsg || '未知错误'}`);
      }

      // 处理返回结果
      const result = {
        msg: this.config.publishToDraft ? '成功发布到草稿箱' : '发布成功',
        article: {
          ...article,
          content: article.content.substring(0, 100) + '...'
        }
      };

      // 如果是草稿箱发布，添加 mediaId
      if (this.config.publishToDraft && data.media_id) {
        result.article.mediaId = data.media_id;
      }

      // 如果是直接发布，添加文章链接
      if (!this.config.publishToDraft && data.url) {
        result.article.url = data.url;
      }

      return result;
    } catch (error) {
      const errorMessage = this.config.publishToDraft 
        ? '发布到微信草稿箱失败' 
        : '发布到微信失败';
      console.error(`${errorMessage}:`, error);
      throw new Error(`${errorMessage}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
}
